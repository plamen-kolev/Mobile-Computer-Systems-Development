<section>
    <div class="col-md-12 container">
        <p class="tool_container" id="partner_name"><%= @connection.get_other(current_user).email %></p>
    
    </div>

    <div class="col-md-12 container" id="messages"></div>

    <div id="tools" class="col-md-12 container">
        <div id="emoticon_container" class="tool_container col-md-12">
            <%= image_tag "emoticons/1f600.svg",  size: "35x35", id: "good-emoticons"  %>
            <%= image_tag "emoticons/1f616.svg",  size: "35x35", id: "rude-emoticons"  %>
            <span>Karma: <%= @connection.get_karma(current_user) %></span> 
        </div>

        <div class="col-md-12 container">
            <input class="btn btn-primary" type="submit"value="Send" style="float: right" id="send_button" />
            <div placeholder="Say it !" style="overflow: hidden; padding-right: .5em;">
                <textarea id="chat-input" class="form-control custom-control" type="text" style="width: 100%;" ></textarea>
            </div>â€‹
        </div>
     
       
    </div>

</section>

<% content_for :top_scripts do %>
    <script src="http:///media.twiliocdn.com/sdk/js/chat/v0.12/twilio-chat.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether-drop/1.4.2/js/drop.min.js"></script>

<% end %>

<% content_for :links do %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tether-drop/1.4.2/css/drop-theme-arrows.min.css"/>
<% end %>

<% content_for :scripts do %>

<script>
    document.addEventListener("DOMContentLoaded", function(event) { 
        var content = "";
        <% @good_emoticons.each do |image| %>
            <% @image_url = image.gsub('app/assets/images/', '') %>
            <% @image_id = image.gsub(/[\/.-]/, '_') %>
            content += '<%= image_tag @image_url, size: '30x30', id: @image_id %>'
        <% end %>

        var rude_content = ""
        <% @rude_emoticons.each do |image| %>
            <% @image_url = image.gsub('app/assets/images/', '') %>
            <% @image_id = image.gsub(/[\/.-]/, '_') %>
            rude_content += '<%= image_tag @image_url, size: '30x30', id: @image_id %>'
        <% end %>

        drop = new Drop({
            target: document.querySelector('#good-emoticons'),
            content:"<div class='emoticon_container'>" + content + "</div>",
            position: 'bottom left',
            openOn: 'click'
        });

        drop = new Drop({
            target: document.querySelector('#rude-emoticons'),
            content:"<div class='emoticon_container'>" + rude_content + "</div>",
            position: 'bottom left',
            openOn: 'click'
        });

        var good_initialised = false;
        $("#good-emoticons").click(function(){
            if (!good_initialised){
                <% @good_emoticons.each do |image| %>
                    <% @image_id = image.gsub(/[\/.-]/, '_') %>
                    $("#<%= @image_id%>").click(function(){
                        $('#chat-input').val($('#chat-input').val() + $("#" + this.id).prop('outerHTML'));
                    });
                <% end %>
            }
            good_initialised = true;
        })

        var rude_init = false;
        $("#rude-emoticons").click(function(){
            if (!rude_init){
                <% @rude_emoticons.each do |image| %>
                    <% @image_id = image.gsub(/[\/.-]/, '_') %>
                    $("#<%= @image_id%>").click(function(){
                        $('#chat-input').val($('#chat-input').val() + $("#" + this.id).prop('outerHTML'));
                    });
                <% end %>
            }
            rude_init = true;
        })

        // set size of messages box to the screen size
        var messages_height = $(window).height() - $(".navbar").height() - $("#tools").height() - $("#partner_name").height() - 40 + 'px';
        $("#messages").css('height', messages_height);
        $(".emoticon_container").css('height', messages_height);

        $(function() {
            // Get handle to the chat div
            var $chatWindow = $('#messages');

            // Our interface to the Chat service
            var chatClient;

            // A handle to the "general" chat channel - the one and only channel we
            // will have in this sample app
            var generalChannel;

            // The server will assign the client a random username - store that value
            // here
            var username;

            // Helper function to print info messages to the chat window
            function print(infoMessage, asHtml) {
                var $msg = $('<div class="info">');
                if (asHtml) {
                    $msg.html(infoMessage);
                } else {
                    $msg.text(infoMessage);
                }
                $chatWindow.append($msg);
            }

            // Helper function to print chat message to the chat window
            function printMessage(fromUser, message) {
                insert_message(message, fromUser, $chatWindow);
            }

            // Alert the user they have been assigned a random username

            // Get an access token for the current user, passing a username (identity)
            // and a device ID - for browser-based apps, we'll always just use the
            // value "browser"
            $.getJSON('/token', {
                device: 'browser'
            }, function(data) {
                // Alert the user they have been assigned a random username
                username = data.identity;

                // Initialize the Chat client
                chatClient = new Twilio.Chat.Client(data.token);
                chatClient.getUserChannels().then(joinChannel);
            });

            function joinChannel() {
                // Get the general chat channel, which is where all the messages are
                // sent in this simple application
                print('Attempting to join chat channel <%= @channel %> ...');
                var promise = chatClient.getChannelBySid('<%= @channel %>');
                promise.then(function(channel) {
                    generalChannel = channel;
                    console.log('Found general channel:');
                    console.log(generalChannel);
                    setupChannel();
                }).catch(function() {});
            }

            // Set up channel after it has been found
        function setupChannel() {
            // Join the general channel
            generalChannel.join().then(function(channel) {
                channel.getMessages(1000).then(function(messages) {
                    //determine the newest message index
                    
                    var totalMessages = messages.items.length;
                    for (i=0; i<totalMessages; i++) {
                        var message = messages.items[i];
                        insert_message(message, message.author, $chatWindow);
                    }
                    update_read_line(messages, generalChannel);

                });
            });

            // Listen for new messages sent to the channel
            generalChannel.on('messageAdded', function(message) {
                printMessage(message.author, message.body);

                generalChannel.getMessages(1000).then(function(messages){
                    update_read_line(messages, generalChannel);
                });
            });
        }

        // Send a new message to the general channel
        var $input = $('#chat-input');
        $input.on('keydown', function(e) {
            if (e.keyCode == 13) {
                generalChannel.sendMessage($input.val())
                $input.val('');
            }
        });

        $("#send_button").click(function(){
            generalChannel.sendMessage($input.val())
            $input.val('');
        });
    });

    function insert_message(message, fromUser, window){
        body = message.body;
        if (typeof message === 'string'){
            body = message;
        }
        var float = "";
        var colour = "message-bubble-you";
        var author = "You: ";
        var current_user = "<%= current_user.email %>";
        if (fromUser === current_user){
            float = "";
            colour = "message-bubble-me";
            author = "Me: ";
        }
        
        window.append(
        "<div class='message-container col-md-12 " + colour +"'>" +
            "<div>" +
                "<span class='message'>" + author + body + "</span>" +
            "</div>" +
        "</div>"
        );
        $("#messages").scrollTop($('#messages')[0].scrollHeight);
        
    }

    function update_read_line(messages, channel){
        var newestMessageIndex = messages.items.length ? 
        messages.items.length : 0;
        console.log(messages);
        //check if we we need to set the consumption horizon
        
        if (channel.lastConsumedMessageIndex !== newestMessageIndex) {
            channel.updateLastConsumedMessageIndex(newestMessageIndex);
            update_last_read(channel, newestMessageIndex);
        }
        console.log("Last consumed message: " + channel.lastConsumedMessageIndex);
    }

    function update_last_read(channel, newestMessageIndex){
            $.ajax({
                type: "POST",
                url: "http://localhost:3000/update_last_read",
                data: {
                    "channel" : channel.sid,
                    "message_index" : newestMessageIndex
                },
                dataType: "json"
            });
    }
    });
</script>
<% end %>